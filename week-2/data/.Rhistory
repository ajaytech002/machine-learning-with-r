install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
IRkernel::installspec()
CLS
cls
clear
data = read.csv("./house prices.csv")
setwd("C:/Users/AjayTech/OneDrive/Documents/Data Science/machine-learning-with-r/week-2/data")
data = read.csv("./house prices.csv")
# Get structure of data
str(data)
# Check for missing values
colSums(is.na(data))
# Function for 'mode'
mode = function(x){
names(sort(table(x),decreasing = T))[1]
}
### Model : Linear Regression
### DataSet : HousePrices
# Import data from data set
data = read.csv("./house prices.csv")
# Get structure of data
str(data)
# Check for missing values
colSums(is.na(data))
# Remove unnecessary columns
data$Id = NULL
data$PoolQC = NULL
data$Fence = NULL
data$MiscFeature = NULL
data$Alley = NULL
# Split numeric and factor data seperately
numeric.data = data[,sapply(data, function(x) is.integer(x))]
factor.data = data[,!sapply(data, function(x) is.integer(x))]
colSums(is.na(numeric.data))
colSums(is.na(factor.data))
# Replace missing values in numeric data with 'mean'
for(x in 1:ncol(numeric.data)){
numeric.data[is.na(numeric.data[,x]),x] = round(mean(numeric.data[,x],na.rm = T))
}
# Function for 'mode'
mode = function(x){
names(sort(table(x),decreasing = T))[1]
}
# Replace missing values in factor data with 'mode'
for(x in 1:ncol(factor.data)){
factor.data[is.na(factor.data[,x]),x] = mode(factor.data[,x])
}
# Combine numeric and factor data using 'cbind'
end.data = cbind(numeric.data,factor.data)
# Install package 'dummies'
install.packages("dummies")
# Load library 'dummies' - to encode the data
library(dummies)
# Combine it as data frame
end.data = dummy.data.frame(end.data)
# Split data to train and test
index = sample(1:nrow(end.data),nrow(end.data)*.7)
train = end.data[index,]
test = end.data[-index,]
# Load library 'corrplot'
library(corrplot)
# Plot the correlation plot
corrplot(cor(numeric.data))
# Build the linear model
linear.model = lm(SalePrice~.,train)
# Get the functional details of the model
summary(linear.model)
# Predict the test values
linear.pred = predict(linear.model,test)
head(linear.pred)
# MAPE
100-(mean(abs((linear.pred - test$SalePrice)/test$SalePrice))*100)
install.packages("corrplot")
# Plot the correlation plot
corrplot(cor(numeric.data))
# Load library 'corrplot'
library(corrplot)
# Plot the correlation plot
corrplot(cor(numeric.data))
# Get the functional details of the model
summary(linear.model)
